{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Observations and Insights"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dependencies and starter code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age_months</th>\n",
       "      <th>Weight (g)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>b128</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>Female</td>\n",
       "      <td>9</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>f932</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Ketapril</td>\n",
       "      <td>Male</td>\n",
       "      <td>15</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>g107</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Ketapril</td>\n",
       "      <td>Female</td>\n",
       "      <td>2</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>a457</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Ketapril</td>\n",
       "      <td>Female</td>\n",
       "      <td>11</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>c819</td>\n",
       "      <td>0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0</td>\n",
       "      <td>Ketapril</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID  Timepoint  Tumor Volume (mm3)  Metastatic Sites Drug Regimen  \\\n",
       "0     b128          0                45.0                 0    Capomulin   \n",
       "1     f932          0                45.0                 0     Ketapril   \n",
       "2     g107          0                45.0                 0     Ketapril   \n",
       "3     a457          0                45.0                 0     Ketapril   \n",
       "4     c819          0                45.0                 0     Ketapril   \n",
       "\n",
       "      Sex  Age_months  Weight (g)  \n",
       "0  Female           9          22  \n",
       "1    Male          15          29  \n",
       "2  Female           2          29  \n",
       "3  Female          11          30  \n",
       "4    Male          21          25  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "import numpy as np\n",
    "\n",
    "# Study data files\n",
    "mouse_metadata = \"Mouse_metadata.csv\"\n",
    "study_results = \"Study_results.csv\"\n",
    "\n",
    "# Read the mouse data and the study results\n",
    "mouse_metadata = pd.read_csv(mouse_metadata)\n",
    "study_results = pd.read_csv(study_results)\n",
    "\n",
    "# Combine the data into a single dataset\n",
    "combined_df = pd.merge(study_results,mouse_metadata,on='Mouse ID',how='left')\n",
    "\n",
    "# Display the data table for preview\n",
    "combined_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mean</th>\n",
       "      <th>Median</th>\n",
       "      <th>Standard Deviation</th>\n",
       "      <th>Variance</th>\n",
       "      <th>SEM</th>\n",
       "      <th>Number of Trials</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drug Regimen</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>Capomulin</td>\n",
       "      <td>40.675741</td>\n",
       "      <td>41.557809</td>\n",
       "      <td>4.994774</td>\n",
       "      <td>24.947764</td>\n",
       "      <td>0.329346</td>\n",
       "      <td>230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Ceftamin</td>\n",
       "      <td>52.591172</td>\n",
       "      <td>51.776157</td>\n",
       "      <td>6.268188</td>\n",
       "      <td>39.290177</td>\n",
       "      <td>0.469821</td>\n",
       "      <td>178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Infubinol</td>\n",
       "      <td>52.884795</td>\n",
       "      <td>51.820584</td>\n",
       "      <td>6.567243</td>\n",
       "      <td>43.128684</td>\n",
       "      <td>0.492236</td>\n",
       "      <td>178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Ketapril</td>\n",
       "      <td>55.235638</td>\n",
       "      <td>53.698743</td>\n",
       "      <td>8.279709</td>\n",
       "      <td>68.553577</td>\n",
       "      <td>0.603860</td>\n",
       "      <td>188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>Naftisol</td>\n",
       "      <td>54.331565</td>\n",
       "      <td>52.509285</td>\n",
       "      <td>8.134708</td>\n",
       "      <td>66.173479</td>\n",
       "      <td>0.596466</td>\n",
       "      <td>186</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Mean     Median  Standard Deviation   Variance       SEM  \\\n",
       "Drug Regimen                                                                  \n",
       "Capomulin     40.675741  41.557809            4.994774  24.947764  0.329346   \n",
       "Ceftamin      52.591172  51.776157            6.268188  39.290177  0.469821   \n",
       "Infubinol     52.884795  51.820584            6.567243  43.128684  0.492236   \n",
       "Ketapril      55.235638  53.698743            8.279709  68.553577  0.603860   \n",
       "Naftisol      54.331565  52.509285            8.134708  66.173479  0.596466   \n",
       "\n",
       "              Number of Trials  \n",
       "Drug Regimen                    \n",
       "Capomulin                  230  \n",
       "Ceftamin                   178  \n",
       "Infubinol                  178  \n",
       "Ketapril                   188  \n",
       "Naftisol                   186  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regiment\n",
    "\n",
    "chart_summary = pd.DataFrame(combined_df.groupby('Drug Regimen').count())\n",
    "chart_summary['Mean'] = pd.DataFrame(combined_df.groupby('Drug Regimen')['Tumor Volume (mm3)'].mean())\n",
    "chart_summary['Median'] = pd.DataFrame(combined_df.groupby('Drug Regimen')['Tumor Volume (mm3)'].median())\n",
    "chart_summary['Standard Deviation'] = pd.DataFrame(combined_df.groupby('Drug Regimen')['Tumor Volume (mm3)'].std())\n",
    "chart_summary['Variance'] = pd.DataFrame(combined_df.groupby('Drug Regimen')['Tumor Volume (mm3)'].var())\n",
    "chart_summary['SEM'] = pd.DataFrame(combined_df.groupby('Drug Regimen')['Tumor Volume (mm3)'].sem())\n",
    "\n",
    "chart_summary = chart_summary[['Mean', 'Median', 'Standard Deviation', 'Variance', 'SEM', 'Mouse ID']]\n",
    "chart_summary = chart_summary.rename(columns = {'Mouse ID': 'Number of Trials'})\n",
    "\n",
    "chart_summary.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bar plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a bar plot showing number of data points for each treatment regimen using pandas\n",
    "\n",
    "drug = combined_df.groupby('Drug Regimen')\n",
    "drug_types = drug['Drug Regimen'].count()\n",
    "drug_types\n",
    "\n",
    "drug_types.plot(kind='bar', color = 'r', legend=False)\n",
    "plt.title(\"Drug Regimen Treatment Numbers\")\n",
    "\n",
    "plt.show()\n",
    "plt.tight_layout()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a bar plot showing number of data points for each treatment regimen using pyplot\n",
    "\n",
    "tick_locations = [value for value in x_axis]\n",
    "\n",
    "plt.figure(figsize=(6,4))\n",
    "plt.bar(drug_types.index.values, drug_types.values, color='g', width=.5)\n",
    "plt.xticks(rotation=90)\n",
    "\n",
    "plt.title('Drug Regimen Study Groups')\n",
    "plt.xlabel('Drug Treatment')\n",
    "\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pie plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pandas\n",
    "\n",
    " # Split up our data into groups based upon 'gender'\n",
    "gender_groups = combined_df.groupby('Sex')\n",
    "\n",
    "# Find out how many of each gender\n",
    "gender_disp = gender_groups['Sex'].count()\n",
    "\n",
    "# Chart our data, give it a title, and label the axes\n",
    "gender_chart = gender_disp.plot(kind=\"pie\", title=\"Study Demographic by Sex\", autopct='%1.1f%%')\n",
    "gender_chart.set_xlabel(\"Gender\")\n",
    "\n",
    "plt.show()\n",
    "plt.tight_layout()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a pie plot showing the distribution of female versus male mice using pyplot\n",
    "\n",
    "plt.pie(gender_disp.values, labels=gender_disp.index.values, colors=['red', 'blue'],\n",
    "       autopct=\"%1.1f%%\", shadow=True, startangle=90)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quartiles, outliers and boxplots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the final tumor volume of each mouse across four of the most promising treatment regimens. Calculate the IQR and quantitatively determine if there are any potential outliers. \n",
    " \n",
    "# Grab just data for the 4 smallest mean tumor volume regimens\n",
    "# filtered_df = combined_df.loc[(combined_df[\"Drug Regimen\"] == \"Capomulin\") | (combined_df[\"Drug Regimen\"] == \"Ramicane\") | (combined_df[\"Drug Regimen\"] == \"Ceftamin\") | (combined_df[\"Drug Regimen\"] == \"Propriva\"), :]\n",
    "\n",
    "# Sort by Timpepoints based on the latest values\n",
    "# filtered_df = filtered_df.sort_values(\"Timepoint\", ascending = False)\n",
    "\n",
    "# Dropping duplicates, keeping first value, should be the latest timepoint per mouse\n",
    "# filtered_df = filtered_df.drop_duplicates(subset=\"Mouse ID\", keep='first')\n",
    "\n",
    "# Tumor volume delta \n",
    "tumor_delta = combined_df.groupby(['Mouse ID']).max()\n",
    "tumor_delta = tumor_delta.reset_index()\n",
    "mergedata = tumor_delta[['Mouse ID', 'Timepoint']].merge(combined_df, on = ['Mouse ID', 'Timepoint'], how = 'left')\n",
    "\n",
    "Capomulin = mergedata.loc[mergedata['Drug Regimen']==\"Capomulin\"]['Tumor Volume (mm3)']\n",
    "Ramicane = mergedata.loc[mergedata['Drug Regimen']==\"Ramicane\"]['Tumor Volume (mm3)']\n",
    "Ceftamin = mergedata.loc[mergedata['Drug Regimen']==\"Ceftamin\"]['Tumor Volume (mm3)']\n",
    "Propriva = mergedata.loc[mergedata['Drug Regimen']==\"Propriva\"]['Tumor Volume (mm3)']\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.529789873749998\n",
      "90.22325480375\n",
      "Series([], Name: Tumor Volume (mm3), dtype: float64)\n"
     ]
    }
   ],
   "source": [
    "# Determine quartiles\n",
    "Capo_quartiles = Capomulin.quantile([.25,.5,.75])\n",
    "lowerq = quartiles[0.25]\n",
    "upperq = quartiles[0.75]\n",
    "iqr = upperq-lowerq\n",
    "\n",
    "# Determine upper and lower bounds\n",
    "Capo_quartiles_lower_bound = lowerq - (1.5*iqr)\n",
    "Capo_quartiles_upper_bound = upperq + (1.5*iqr)\n",
    "\n",
    "Capo_quartiles\n",
    "\n",
    "print(Capo_quartiles_lower_bound)\n",
    "print(Capo_quartiles_upper_bound)\n",
    "print (f'{Capomulin.loc[(Capomulin<Capo_quartiles_lower_bound)|(Capomulin>Capo_quartiles_upper_bound)]}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.529789873749998\n",
      "90.22325480375\n",
      "Series([], Name: Tumor Volume (mm3), dtype: float64)\n"
     ]
    }
   ],
   "source": [
    "# Determine quartiles\n",
    "Rami_quartiles = Ramicane.quantile([.25,.5,.75])\n",
    "lowerq = quartiles[0.25]\n",
    "upperq = quartiles[0.75]\n",
    "iqr = upperq-lowerq\n",
    "\n",
    "# Determine upper and lower bounds\n",
    "Rami_quartiles_lower_bound = lowerq - (1.5*iqr)\n",
    "Rami_quartiles_upper_bound = upperq + (1.5*iqr)\n",
    "\n",
    "Rami_quartiles\n",
    "\n",
    "print(Rami_quartiles_lower_bound)\n",
    "print(Rami_quartiles_upper_bound)\n",
    "print (f'{Ramicane.loc[(Ramicane<Rami_quartiles_lower_bound)|(Ramicane>Rami_quartiles_upper_bound)]}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.529789873749998\n",
      "90.22325480375\n",
      "Series([], Name: Tumor Volume (mm3), dtype: float64)\n"
     ]
    }
   ],
   "source": [
    "# Determine quartiles\n",
    "Ceft_quartiles = Ceftamin.quantile([.25,.5,.75])\n",
    "lowerq = quartiles[0.25]\n",
    "upperq = quartiles[0.75]\n",
    "iqr = upperq-lowerq\n",
    "\n",
    "# Determine upper and lower bounds\n",
    "Ceft_quartiles_lower_bound = lowerq - (1.5*iqr)\n",
    "Ceft_quartiles_upper_bound = upperq + (1.5*iqr)\n",
    "\n",
    "Ceft_quartiles\n",
    "\n",
    "print(Ceft_quartiles_lower_bound)\n",
    "print(Ceft_quartiles_upper_bound)\n",
    "print (f'{Ceftamin.loc[(Ceftamin<Ceft_quartiles_lower_bound)|(Ceftamin>Ceft_quartiles_upper_bound)]}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.529789873749998\n",
      "90.22325480375\n",
      "Series([], Name: Tumor Volume (mm3), dtype: float64)\n"
     ]
    }
   ],
   "source": [
    "# Determine quartiles\n",
    "Prop_quartiles = Propriva.quantile([.25,.5,.75])\n",
    "lowerq = quartiles[0.25]\n",
    "upperq = quartiles[0.75]\n",
    "iqr = upperq-lowerq\n",
    "\n",
    "# Determine upper and lower bounds\n",
    "Prop_quartiles_lower_bound = lowerq - (1.5*iqr)\n",
    "Prop_quartiles_upper_bound = upperq + (1.5*iqr)\n",
    "\n",
    "Prop_quartiles\n",
    "print(Prop_quartiles_lower_bound)\n",
    "print(Prop_quartiles_upper_bound)\n",
    "print (f'{Propriva.loc[(Propriva<Prop_quartiles_lower_bound)|(Propriva>Prop_quartiles_upper_bound)]}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(*args, **kw)>"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a box plot of the final tumor volume of each mouse across four regimens of interest\n",
    "plt.boxplot([Capomulin, Ramicane, Ceftamin, Propriva], labels = ['Capomulin', 'Ramicane', 'Ceftamin', 'Provpiva'])\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Line and scatter plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a line plot of time point versus tumor volume for a mouse treated with Capomulin\n",
    "\n",
    "Capomulin_df = combined_df.loc[(combined_df[\"Drug Regimen\"] == \"Capomulin\"),:]\n",
    "\n",
    "# Set variables to hold relevant data\n",
    "timepoint = Capomulin_df[\"Timepoint\"]\n",
    "tumor_volume = Capomulin_df[\"Tumor Volume (mm3)\"]\n",
    "\n",
    "# Plot the tumor volume for various mice\n",
    "tumor_volume_line, = plt.plot(timepoint, tumor_volume)\n",
    "\n",
    "# Show the chart, add labels\n",
    "plt.xlabel('Timepoint')\n",
    "plt.ylabel('Tumor Volume')\n",
    "plt.title('Capomulin Study Results')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate a scatter plot of mouse weight versus average tumor volume for the Capomulin regimen \n",
    "\n",
    "# Pull values for x and y values\n",
    "mouse_weight = Capomulin_df.groupby(Capomulin_df[\"Mouse ID\"])[\"Weight (g)\"].mean()\n",
    "tumor_volume = Capomulin_df.groupby(Capomulin_df[\"Mouse ID\"])[\"Tumor Volume (mm3)\"].mean()\n",
    "\n",
    "# Create Scatter Plot with values calculated above\n",
    "plt.scatter(mouse_weight,tumor_volume)\n",
    "plt.xlabel(\"Weight of Mouse\")\n",
    "plt.ylabel(\"Tumor Volume\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Correlation of weight and tumor value : 0.84\n"
     ]
    }
   ],
   "source": [
    "# Calculate the correlation coefficient and linear regression model for mouse weight and average tumor volume for the Capomulin regimen\n",
    "\n",
    "# Pull values for x and y values\n",
    "mouse_weight = Capomulin_df.groupby(Capomulin_df[\"Mouse ID\"])[\"Weight (g)\"].mean()\n",
    "tumor_volume = Capomulin_df.groupby(Capomulin_df[\"Mouse ID\"])[\"Tumor Volume (mm3)\"].mean()\n",
    "\n",
    "# Perform a linear regression on year versus violent crime rate\n",
    "slope, int, r, p, std_err = st.linregress(mouse_weight, tumor_volume)\n",
    "      \n",
    "# Create equation of line to calculate predicted violent crime rate\n",
    "fit = slope * mouse_weight + int\n",
    "\n",
    "# Plot the linear model on top of scatter plot \n",
    "plt.scatter(mouse_weight,tumor_volume)\n",
    "plt.xlabel(\"Weight of Mouse\")\n",
    "plt.ylabel(\"Tumor Volume\")\n",
    "plt.plot(mouse_weight,fit,\"--\")\n",
    "plt.xticks(mouse_weight, rotation=90)\n",
    "plt.show()\n",
    "\n",
    "# Caculate correlation coefficient\n",
    "corr = round(st.pearsonr(mouse_weight,tumor_volume)[0],2)\n",
    "print(f'Correlation of weight and tumor value : {corr}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
